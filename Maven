Develops, Tests, Builds, qualification, backup  
   deploys & monitors applications 
  Applications are the output from Softwares development 

Maven:
Build Tools:  
===========
  SDLC-->
Devops Process:
  Devops--> 
            Coding --> Testing--> Build -->  Deployed ---> monitored  

Build Tools are use to create deployable packages
  [packages that the application servers/Softwares can understand]  Tomcat
What does Build Tools achieved?:
  use to create deployable packages  
     raw code + build = packages that the deployment servers can interpretes 

Projects are developed using programming languages including:
  java 
  python 
  nodeJS 
  .NET
  JAVASCRIPT
  etc.
What kind of projects are you supporting in your environment(Landmark)?  
answer:
We support java based projects or projects written in java.
and a few .NET, python and NodeJS projects
  We support apps written in java,.NET, NodeJS by developers 
  java, .NET, NodeJS is a programming language
Build Tools:
  java : 
    MAVEN/ANt/Gradle  
 .Net:
 ----
   NaNt / MSBuild
JAVASCRIPT:
-----------
  Gulp / Grunt
Python:
-------
  PyBuilder
Ruby:
----
  Rake

NodeJS:
  npm

For java:
  ANt / Gradle /  maven

Maven:
Apache Maven is a software project management and comprehension tool. 
It is based on the concept of a project object model (POM),
Maven can manage a project's build, reporting and documentation.

Maven is an open java based build tool.  

What is expected from developers:
  Project main composition:    
  source Code   
  unit-test-Cases   
  BuildScripts 

code:
 app.py  = print("Welcome to TD BANK")
 app.sh  = echo "Welcome to TD BANK"

unit-test-Cases  : 
 app.test  
    if [ -e Welcome /home/obi/app.py ] then  
    echo 'Test passed'
    print('Test passed')
    else 
    print('Test failed')
    fi
  Selenium should be integrated in the development environment
  for test automation 

The process of writing and running unit-test-Cases is called: Unit Testing  

PayPal30 project:
 source Code     = 50k lines  
 unit-test-Cases = 20k lines  

Unit testing is Testing individual units/components or each line of the code by 
developers 
Who writes unit test cases     = developers  
who performs/runs unit testing = developers  

Maven Build Tools:
-----------------
https://maven.apache.org/download.cgi

MAVEN = is an open source Java BASED Build  tool
        It was originally developed in java for java codes 
        The vendor of maven is apache  
Any software can be available in three options:
Licence edition: The software has to be paid for

Free edition: 
  Software is given for free BUT without source code - 
  How the software was developed is not shared.

Open source edition: 
   Implies both the software and 
   the source code are freely available.      
   You can download the source code and 
   develop on the existing features

IQ: Explain you experience in open source technologies?
      1. Maven 
      2. Linux OS  

Build in SDLC Implies: 
  creating deployable packages from raw codes.
     compiling and 
       Hello.java  --> 
       hello.py    --> 
We need a compiler to compile java codes:
  java software is required for compiling java codes.
  hello.java -- print("Hello Engineers") 
  javac hello.java  ---> hello.class 
  hello.java ---> Human readable file  
  hello.class --> machine[JVM] readable file  [binary file = 012310123345] 

JVM only read binary files 
jvm = Java Virtual Machine 

Maven installation:
https://maven.apache.org/download.cgi
  Maven can be installed in Any platform:
    Linux --: 
      RedHat / Ubuntu / CentOS
    Windows:
      server2012/2016/2019 
      Windows XP/7/8/10/11
    MacOS :
    Solaris:   

Ticket_maven-001 
Install Maven on a RedHat Linux 9 Server  

2. Java is a pre-requisite for maven to run 
    JRE --> JAVA RUNTIME ENVIRONMENT
    JDK --> JAVA DEVELOPMENT KIT 1.8+
            JVM will also be installed

openJDK1.8+,  // openJDK4.1   
==============
https://maven.apache.org/download.cgi
https://github.com/LandmakTechnology/package-management
https://github.com/LandmakTechnology/package-management/blob/master/Maven-installation/READme.md
connect to the server and setup maven:
  publicIP = 54.204.78.6
  userName = ec2-user 
  ssh-key  = class301key.pem 
  ssh -i class301key.pem ec2-user@54.204.78.6  


  ssh -i "class31key.pem" ec2-user@54.204.78.6

https://dlcdn.apache.org/maven/maven-3/3.9.0/binaries/apache-maven-3.9.0-bin.zip

[ec2-user@maven maven]$ pwd
/opt/maven

  Maven home: /opt/maven
MHD = /opt/maven [ M2_HOME ]:

export M2_HOME=/opt/maven
export PATH=$PATH:$M2_HOME/bin
MHD = /opt/maven 
The MHD is where the maven software is extracted.
   wget url  
   unzip  maven.zip  

[ec2-user@maven maven]$ ls
mavenHomeDir = M2_HOME = /opt/maven :
  bin --- binary files
          mvn 
  conf  --configuration files 
          settings.xml 
  lib -- jar files and libraries 
  boot  

LICENSE  NOTICE  README.txt

Ticket_0014_build_apps :
========================
We use maven to build and manage applications 
for java codes  in our environment :

Generally We have:
  stanalone applications -  jar [app.jar, hello.jar]
  web applications    -     war [app.war] 
  enterprise applications - ear 

hello.java:
After using maven to build the following options are possible
   hello.java --> hello.jar  [stanalone applications] 
   hello.java --> hello.war  [web applications]
   hello.java --> hello.ear  [enterprise applications]

maven: creates packages (jar, war and/OR ear)
  jar: Standalone Applications
    ebay.jar
    paypal.jar
    tesla.jar 
    *.jar  

  war: web Applications
    boa.war
    tesla.war

  ear: Enterprise Applications
    aa.ear 
    tesla.ear
    td.ear 
Archieves:
  tar files = tesla.gz.tar   
  zip files = tesla.zip 
  tesla.jar  
  tesla.war  
  tesla.ear 

Standalone Applications – *.jar  Java Archieve
=============================================  
 java code ONLY   
    contains only java classes
    jar = .classfiles
    maven-standalone-application.jar
    app.jar 

Web Applications  – .war  web Archieve
======================================
Java code + 
web content ( CSS, HTML, JS, videos, images…,) 
Backend code   - frontend code
maven-web-app.war
tesla.war

Enterprise applications – .ear –
==================================
 Enterprise Archieve
    Multiple Modules
      Java code + web content 
    Ear =  war(s) + jar(s)
    Banking applications
    maven-web-application.war
    maven-enterprise-application.ear
   modules:
    login / 
    accountCreation / 
    moneyTransfer 
Based on our project we are going to create 
   multiple packages either;  jar, war or ear packages:

What are we building? 
 we are creating deployable packages from java codes:
  1.  src-- source code   :
  2.  Unit-Test-Cases     : 
         JAVA  --> JUnit test cases 
         .Net  --> NUnit test cases 
          C++  --> CPPUnit test cases   
  3. BuildScripts  -- pom.xml     :  
        xml  = extensible mark-up language 
               It is a dynamic language. 
               Tags can be created based on the user preferences 
             Paul: <welcome>Welcome to Landmark</welcome>
             Mary: <tesla>Welcome to Tesla</tesla>
             Obi : <greet>Welcome to Landmark</greet>

        html = hyperText mark-up language
               It comes with pre-define tags that can't be changed 
               TAGS: h1, h2, h3, p, 
                   <h1>Welcome to Landmark</h1>

   pom.xml = This is the BuildScript for maven  
             developers should define name, plugins, tags, versions,
             project dependencies and more in the BuildScript(pom.xml)


Standalone Applications
Ticket_saa_tesla0014  
===================
Requirements:
1. project repository in the SCM [GitHub / GitLab]
   https://github.com/Landmark-Technologies/maven-standalone-application
2. We need a server with java & maven installed and configured   
3. Create a project directory in the maven/build server
    mkdir java-projects  
4. Clone the codes from github in the project directory  
   git clone https://github.com/Landmark-Technologies/maven-standalone-application
     src/main  
     src/test
     
     pom.xml 
     <groupId>com.mt</groupId>
        <artifactId>maven-stanalone-application</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>jar</packaging>

        <name>maven-stanalone-application</name>
        <url>http://mylandmarktech.com</url>

maven-stanalone-application-0.0.1-SNAPSHOT.jar 

Maven uses dependencies and plugins to test and create packages. 
Examples of maven dependencies 
   Selenium 
   JUNit 
   log4j
build.gradle   --- BuildScript for gradle
pom.xml        --- BuildScript for maven
pom = project object model      
dependencies:  
repositories  
plugins:    
properties: 
version:

<dependencies>
      <dependency>Selenium</dependency>
      <dependency>log4j</dependency>
      <dependency>JUNit</dependency>
</dependencies>

==================
where are these dependencies found/located??? :
dependencies and/or are located in maven repositories
  https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java/4.6.0

<repositories> 
   mavenLocalRepo  
   mavenRemoteRepo  
   mavenProxyRepo  
   mavenCentralRepo
</repositories>

selenium:
  <dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.6.0</version>
  </dependency>
log4j: 
  <dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
  </dependency>

where are these dependencies found/located??? :
  1. Maven local repository 
      .m2/repository = default 
  2. Maven remote/proxy repository 
  3. Maven central repository
      https://mvnrepository.com/repos/central

IQ : Explain the maven lifecycle  ??
Maven has 3 lifecycles: 
  Clean, 
  site/swagger and 
  default
  Clean, site and default

Lifecycles      Goal(s)
----------      -----   
Clean            clean  (mvn clean)
  mvn clean      delete old builds 

Site/Swagger     site
                   create java classes (byte code)
                   JVM 
                   app.java = 'echo DevOps is great'
                   app.class = 012450012354

                Goals:
default        mvn validate:
                  It will validate the project structure and resource files
               mvn compile:
                  It will compile all java classes and test classes
               mvn test:
                  It will run the unit test cases (JUNit)
               mvn package:
                  It will create packages in target directory 
                      (*.jar/*.war/*ear) app.war
               mvn install:
                  It will store the build artifacts in MAVEN LOCAL REPO
                     default location: .m2/repository
               
               mvn deploy:  NEXUS
                  It will upload the build artifacts into maven-remote-repo
---
mvn package: 
  1. validate
  2. compile 
  3. RunUnitTesting 
  4. create the packages [jar/war/ear]

[INFO] Results:
[INFO]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

BUILD SUCCESS
[INFO] Total time:  2.877 s

Maven uses plugins/dependencies in th build Process.
   ls -a ~
   ls -a /home/ec2-user  
    mavenLocalRepo = .m2/repository  
    ls  ~/.m2/repository/

  1. Maven local repository 
        .m2/repository = default 

  2. Maven remote/proxy repository 

  3. Maven central repository
      https://mvnrepository.com/repos/central


[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  5.577 s


BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.845 s

[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  5.408 s

mavenLocalRepo = .m2/repository is deleted in error 
Securing the maven local repo:
  1. By creating a custom maven local repo  
       .m2/repository/
     settings.xml  
        /home/ec2-user/.mlr  
   sudo vi /opt/maven/conf/settings.xml  

  <!-- localRepository
          The path to the local repository maven will use to store artifacts.
          Default: ${user.home}/.m2/repository
        <localRepository>/path/to/local/repo</localRepository>
  -->
  <localRepository>/home/ec2-user/.mlr</localRepository>

<!--    
-->
 sudo echo "<localRepository>/home/ec2-user/.mlr</localRepository>" >> /opt/maven/conf/settings.xml  

rm -rf target  
mvn clean  

timedatectl list-timezones
sudo  timedatectl set-timezone "Africa/Douala"
sudo  timedatectl set-timezone America/New_York

===============================
maven video 1 --- March 6, 2023
================================
https://landmarkmetropolitanuniversity.zoom.us/rec/share/_-W34LOSlPVuWLfzxmEpFKfulql8cld8YsKWDLrOJVsv3cVhBIV_xWwMvUR962v4.amlEGpcBn9uK3HDq

Do not share any Landmark resources [videos, notes, class links etc.] except for those on youtube
============================================================================================

